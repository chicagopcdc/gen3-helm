# Default values for amanuensis.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  # -- (bool) Whether the deployment is for development purposes.
  dev: true
  # -- (map) Postgres database configuration.
  postgres:
    # -- (bool) Whether the database should be created.
    dbCreate: true
    # -- (map) Master credentials to postgres. This is going to be the default postgres server being used for each service, unless each service specifies their own postgres
    master:
      # -- (string) hostname of postgres server
      host:
      # -- (string) username of superuser in postgres. This is used to create or restore databases
      username: postgres
      # -- (string) password for superuser in postgres. This is used to create or restore databases
      password:
      # -- (string) Port for Postgres.
      port: "5432"
  # -- (string) Environment name. This should be the same as vpcname if you're doing an AWS deployment. Currently this is being used to share ALB's if you have multiple namespaces. Might be used other places too.
  environment: default
  # -- (string) Hostname for the deployment.
  hostname: localhost
  # -- (string) ARN of the reverse proxy certificate.
  revproxyArn: arn:aws:acm:us-east-1:123456:certificate
  # -- (string) URL of the data dictionary.
  dictionaryUrl: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
  # -- (string) Portal application name.
  portalApp: gitops
  # -- (string) S3 bucket name for Kubernetes manifest files.
  kubeBucket: kube-gen3
  # -- (string) S3 bucket name for log files.
  logsBucket: logs-gen3
  # -- (bool) Whether to sync data from dbGaP.
  syncFromDbgap: false
  # -- (bool) Whether public datasets are enabled.
  publicDataSets: true
  # -- (string) Access level for tiers. acceptable values for `tier_access_level` are: `libre`, `regular` and `private`. If omitted, by default common will be treated as `private`
  tierAccessLevel: libre
  # -- (int) Only relevant if tireAccessLevel is set to "regular". Summary charts below this limit will not appear for aggregated data.
  tierAccessLimit: 1000
  # -- (bool) Whether network policies are enabled.
  netPolicy: true
  # -- (int) Number of dispatcher jobs.
  dispatcherJobNum: 10
  # -- (bool) Whether Datadog is enabled.
  ddEnabled: false
  # -- (bool) If the service will be deployed with a Pod Disruption Budget. Note- you need to have more than 2 replicas for the pdb to be deployed.
  pdb: false
  # -- (int) The minimum amount of pods that are available at all times if the PDB is deployed.
  minAvialable: 1

  postgres:
    # -- (bool) Whether the database should be created.
    dbCreate: true
    # -- (map) Master credentials to postgres. This is going to be the default postgres server being used for each service, unless each service specifies their own postgres
    master:
      # -- (string) hostname of postgres server
      host:
      # -- (string) username of superuser in postgres. This is used to create or restore databases
      username: postgres
      # -- (string) password for superuser in postgres. This is used to create or restore databases
      password:
      # -- (string) Port for Postgres.
      port: "5432"

postgres:
  # (bool) Whether the database should be restored from s3. Default to global.postgres.dbRestore
  dbRestore: false
  # -- (bool) Whether the database should be created. Default to global.postgres.dbCreate
  dbCreate:
  # -- (string) Hostname for postgres server. This is a service override, defaults to global.postgres.host
  host:
  # -- (string) Database name for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  database:
  # -- (string) Username for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  username:
  # -- (string) Port for Postgres.
  port: "5432"
  # -- (string) Password for Postgres. Will be autogenerated if left empty.
  password:
  # -- (string) Will create a Database for the individual service to help with developing it.
  separate: false

postgresql:
  primary:
    persistence:
      # -- (bool) Option to persist the dbs data.
      enabled: false

arboristUrl:

replicaCount: 1

image:
  repository: quay.io/pcdc/amanuensis
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "pcdc_dev_2023-09-06T16_36_49-05_00"

imagePullSecrets: []

nameOverride: ""

fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources: 
  requests:
    # -- (string) The amount of CPU requested
    cpu: 0.1
    # -- (string) The amount of memory requested
    memory: 12Mi
  # -- (map) The maximum amount of resources that the container is allowed to use
  limits:
    # -- (string) The maximum amount of CPU the container can use
    cpu: 1.0
    # -- (string) The maximum amount of memory the container can use
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

logo:

# -- (list) Environment variables to pass to the container
env:
  - name: GEN3_UWSGI_TIMEOUT
    valueFrom:
      configMapKeyRef:
        name: manifest-global
        key: uwsgi-timeout
        optional: true
  - name: AWS_STS_REGIONAL_ENDPOINTS
    value: regional
  - name: PYTHONPATH
    value: /var/www/amanuensis
  - name: GEN3_DEBUG
    value: "False"
  - name: AMANUENSIS_PUBLIC_CONFIG
    valueFrom:
      configMapKeyRef:
        name: manifest-amanuensis
        key: amanuensis-config-public.yaml
        optional: true
  - name: PGHOST
    valueFrom:
      secretKeyRef:
        name: amanuensis-dbcreds
        key: host
        optional: false
  - name: PGUSER
    valueFrom:
      secretKeyRef:
        name: amanuensis-dbcreds
        key: username
        optional: false
  - name: PGPASSWORD
    valueFrom:
      secretKeyRef:
        name: amanuensis-dbcreds
        key: password
        optional: false
  - name: PGDB
    valueFrom:
      secretKeyRef:
        name: amanuensis-dbcreds
        key: database
        optional: false
  - name: DBREADY
    valueFrom:
      secretKeyRef:
        name: amanuensis-dbcreds
        key: dbcreated
        optional: false
  - name: DB
    value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)

# -- (list) Volumes to attach to the container.
volumes:
  - name: logo-volume
    configMap:
      name: "logo-config"
  - name: config-volume
    secret:
      secretName: "amanuensis-config"
  - name: amanuensis-volume
    secret:
      secretName: "amanuensis-creds"
  - name: amanuensis-jwt-keys
    secret:
      secretName: "amanuensis-jwt-keys"
  #need to add potentially
  - name: yaml-merge
    configMap:
      name: "amanuensis-yaml-merge"
      optional: true

# -- (list) Volumes to mount to the container.
volumeMounts:
  - name: "logo-volume"
    readOnly: true
    mountPath: "/amanuensis/amanuensis/static/img/logo.svg"
    subPath: "logo.svg"
  - name: "config-volume"
    readOnly: true
    mountPath: "/var/www/amanuensis/amanuensis-config.yaml"
    subPath: amanuensis-config.yaml
  - name: "yaml-merge"
    readOnly: true
    mountPath: "/var/www/amanuensis/yaml_merge.py"
    subPath: yaml_merge.py
  - name: "amanuensis-volume"
    readOnly: true
    mountPath: "/var/www/amanuensis/creds.json"
    subPath: creds.json
  - name: "amanuensis-jwt-keys"
    readOnly: true
    mountPath: "/var/www/amanuensis/jwt_private_key.pem"
    subPath: "jwt_private_key.pem"


# Values to determine the labels that are used for the deployment, pod, etc.
# -- (string) Valid options are "production" or "dev". If invalid option is set- the value will default to "dev".
release: "production"
# -- (string) Valid options are "true" or "false". If invalid option is set- the value will default to "false".
criticalService: "true"
# -- (string) Label to help organize pods and their use. Any value is valid, but use "_" or "-" to divide words.
partOf: "Core-Service"
# -- (map) Will completely override the selectorLabels defined in the common chart's _label_setup.tpl
selectorLabels:
# -- (map) Will completely override the commonLabels defined in the common chart's _label_setup.tpl
commonLabels:

# Values to configure datadog if ddEnabled is set to "true".
# -- (bool) If enabled, the Datadog Agent will automatically inject Datadog-specific metadata into your application logs.
datadogLogsInjection: true
# -- (bool) If enabled, the Datadog Agent will collect profiling data for your application using the Continuous Profiler. This data can be used to identify performance bottlenecks and optimize your application.
datadogProfilingEnabled: true
# -- (int) A value between 0 and 1, that represents the percentage of requests that will be traced. For example, a value of 0.5 means that 50% of requests will be traced.
datadogTraceSampleRate: 1


AMANUENSIS_CONFIG: 
  APP_NAME: 'Gen3 Data Commons'
  HOSTNAME: 'localhost'
  # Where amanuensis microservice is deployed 
  # a standardized name unique to each app for service-to-service interaction
  # so the service receiving the request knows it came from another Gen3 service
  # postgres db to connect to
  # connection url format:
  #     postgresql://[user[:password]@][netloc][:port][/dbname]

  # A URL-safe base64-encoded 32-byte key for encrypting keys in db
  # in python you can use the following script to generate one:
  #     import base64
  #     import os
  #     key = base64.urlsafe_b64encode(os.urandom(32))
  #     print(key)
  ENCRYPTION_KEY: ''

  # Cross-service keys
  # Private key for signing requests sent to other Gen3 services
  PRIVATE_KEY_PATH: '/var/www/amanuensis/jwt_private_key.pem'

  # //////////////////////////////////////////////////////////////////////////////////////
  # DEBUG & SECURITY SETTINGS
  #   - Modify based on whether you're in a dev environment or in production
  # //////////////////////////////////////////////////////////////////////////////////////
  # flask's debug setting
  # WARNING: DO NOT ENABLE IN PRODUCTION (for testing purposes only)
  DEBUG: true
  # if true, will automatically login a user with username "test"
  # WARNING: DO NOT ENABLE IN PRODUCTION (for testing purposes only)
  MOCK_AUTH: true
  # if true, will fake a successful login response from Google in /login/google
  #     NOTE: this will also modify the behavior of /link/google endpoints
  # WARNING: DO NOT ENABLE IN PRODUCTION (for testing purposes only)
  # will login as the username set in cookie DEV_LOGIN_COOKIE_NAME
  MOCK_GOOGLE_AUTH: true

  # if true, will ignore anything configured in STORAGE_CREDENTIALS
  MOCK_STORAGE: true
  # allow OIDC traffic on http for development. By default it requires https.
  #
  # WARNING: ONLY set to true when amanuensis will be deployed in such a way that it will
  #          ONLY receive traffic from internal clients and can safely use HTTP.
  AUTHLIB_INSECURE_TRANSPORT: true

  # set if you want browsers to only send cookies with requests over HTTPS
  SESSION_COOKIE_SECURE: true

  ENABLE_CSRF_PROTECTION: true

  OIDC_ISSUER: 'https://{{HOSTNAME}}/user'

  OAUTH2:
    client_id: 'oauth2_client_id'
    client_secret: 'oauth2_client_secret'
    api_base_url: 'https://{{HOSTNAME}}/user/'
    authorize_url: 'https://{{HOSTNAME}}/user/oauth2/authorize'
    access_token_url: 'https://{{HOSTNAME}}/user/oauth2/token'
    refresh_token_url: 'https://{{HOSTNAME}}/user/oauth2/token'
    client_kwargs: 
      # redirect_uri: 'https://{{HOSTNAME}}/api/v0/oauth2/authorize'
      redirect_uri: 'https://{{HOSTNAME}}/amanuensis/oauth2/authorize'
      scope: 'openid data user'
    # deprecated key values, should be removed after all commons use new oidc
    internal_oauth_provider: 'http://fence-service/oauth2/'
    oauth_provider: 'https://{{HOSTNAME}}/user/oauth2/'
    # redirect_uri: 'https://{{HOSTNAME}}/api/v0/oauth2/authorize'
    redirect_uri: 'https://{{HOSTNAME}}/amanuensis/oauth2/authorize'

  USER_API: 'http://fence-service/'
  # option to force authutils to prioritize USER_API setting over the issuer from
  # token when redirecting, used during local docker compose setup when the
  # services are on different containers but the hostname is still localhost
  FORCE_ISSUER: true

  # amanuensis (at the moment) attempts a migration on startup. setting this to false will disable that
  # WARNING: ONLY set to false if you do NOT want to automatically migrate your database.
  #          You should be careful about incompatible versions of your db schema with what
  #          amanuensis expects. In other words, things could be broken if you update to a later
  #          amanuensis that expects a schema your database isn't migrated to.
  # NOTE: We are working to improve the migration process in the near future
  ENABLE_DB_MIGRATION: true


  # //////////////////////////////////////////////////////////////////////////////////////
  # LIBRARY CONFIGURATION (flask)
  #   - Already contains reasonable defaults
  # //////////////////////////////////////////////////////////////////////////////////////

  # used for flask, "path mounted under by the application / web server"
  # since we deploy as microservices, fence is typically under {{base}}/user
  # this is also why our BASE_URL default ends in /user
  APPLICATION_ROOT: '/amanuensis'



  ########################################################################################
  #                               OPTIONAL CONFIGURATIONS                                #
  ########################################################################################

  # //////////////////////////////////////////////////////////////////////////////////////
  # SUPPORT INFO
  # //////////////////////////////////////////////////////////////////////////////////////
  # If you want an email address to show up when an unhandled error occurs, provide one
  # here. Something like: support@example.com
  SUPPORT_EMAIL_FOR_ERRORS: null


  # //////////////////////////////////////////////////////////////////////////////////////
  # AWS BUCKETS AND CREDENTIALS
  #   - Support `/data` endpoints
  # //////////////////////////////////////////////////////////////////////////////////////
  AWS_CREDENTIALS:
    'DATA_DELIVERY_S3_BUCKET':
      aws_access_key_id: 'DATA_DELIVERY_S3_BUCKET_ACCESS_KEY'
      aws_secret_access_key: 'DATA_DELIVERY_S3_BUCKET_PRIVATE_KEY'
  # NOTE: Remove the {} and supply creds if needed. Example in comments below
  #   'CRED1':
  #     aws_access_key_id: ''
  #     aws_secret_access_key: ''
  #   'CRED2':
  #     aws_access_key_id: ''
  #     aws_secret_access_key: ''

  # NOTE: the region is optonal for s3_buckets, however it should be specified to avoid a
  # call to GetBucketLocation which you make lack the AWS ACLs for.
  # public buckets do not need the region field.
  S3_BUCKETS: {}
  # NOTE: Remove the {} and supply buckets if needed. Example in comments below
  #   bucket1:
  #     cred: 'CRED1'
  #     region: 'us-east-1'
  #     # optionally you can manually specify an s3-compliant endpoint for this bucket
  #     endpoint_url: 'https://cleversafe.example.com/'
  #   bucket2:
  #     cred: 'CRED2'
  #     region: 'us-east-1'
  #   bucket3:
  #     cred: '*' # public bucket
  #   bucket4:
  #     cred: 'CRED1'
  #     region: 'us-east-1'
  #     role-arn: 'arn:aws:iam::role1'

  # `DATA_DOWNLOAD_BUCKET` specifies an S3 bucket to which data files are uploaded by the system/admin user,
  # User Data request files are stored here.
  DATA_DOWNLOAD_BUCKET: 'bucket1'

  # //////////////////////////////////////////////////////////////////////////////////////
  # PROXY
  #   - Optional: If the api is behind firewall that needs to set http proxy
  # //////////////////////////////////////////////////////////////////////////////////////
  # NOTE: leave as-is to not use proxy
  # this is only used by the Google Oauth2Client at the moment if provided
  HTTP_PROXY:
    host: null
    port: 3128

  # //////////////////////////////////////////////////////////////////////////////////////
  # MICROSERVICE PATHS
  #   - Support `/data` endpoints & authz functionality
  # //////////////////////////////////////////////////////////////////////////////////////
  # url where indexd microservice is running (for signed urls primarily)
  # NOTE: Leaving as null will force fence to default to {{BASE_URL}}/index
  # example value: 'https://example.com/index'
  INDEXD: null

  # this is the username which fence uses to make authenticated requests to indexd
  INDEXD_USERNAME: 'amanuensis'
  # this is the password which fence uses to make authenticated requests to indexd
  INDEXD_PASSWORD: ''

  # url where authz microservice is running
  ARBORIST: null
  FENCE: 'http://fence-service'

  # //////////////////////////////////////////////////////////////////////////////////////
  # EMAIL
  #   - Support for sending hubspot API work updates to project management team
  # //////////////////////////////////////////////////////////////////////////////////////
  # Simple Email Service (for sending emails from fence)
  #
  # NOTE: Example in comments below
  AWS_SES:
    SENDER: ""
    RECIPIENT: ""
    AWS_REGION: "us-east-1"
    AWS_ACCESS_KEY: ""
    AWS_SECRET_KEY: ""

  HUBSPOT:
    API_KEY: "DEV_KEY"
    
  DB_MIGRATION_POSTGRES_LOCK_KEY: 100


  # Draft: The user started the form but saves it to complete another day 
  # Submitted: the user sends the completed form to a PM (email or through the system)
  # Review: In the hand of the EC
  # Revision: back to the requestor, needs to respond to the EC questions or concerns. loop to review
  # Approved with Feedback: It is approved but it needs some changes with for example the filter-set before being approved
  # Request Criteria Finalized: Update the filterset or apply the feedback the EC gave
  # Approved: the request is approved
  # Rejected: the request is rejected
  # Withdrawal: The request has been withdrawn
  # Agreements Negotiation: Creating the agreements after the request is approved
  # Agreements Executed: The agreements is in place
  # Data Available: The data is ready to be submitted
  # Data Downloaded: When a user actually download the data
  # Published: Remove access to the data
  CONSORTIUM_STATUS:
    DEFAULT:
    # In order of precedence.
      CODES:
        - "DRAFT"
        - "SUBMITTED"
        - "IN_REVIEW"
        - "REVISION"
        - "APPROVED_WITH_FEEDBACK"
        - "REQUEST_CRITERIA_FINALIZED"
        - "APPROVED"
        - "REJECTED"
        - "WITHDRAWAL"
        - "AGREEMENTS_NEGOTIATION"
        - "AGREEMENTS_EXECUTED"
        - "DATA_AVAILABLE"
        - "DATA_DOWNLOADED"    
        - "PUBLISHED"  
      FINAL:
        - "REJECTED"
        - "WITHDRAWAL"
        - "DATA_DOWNLOADED"
      NOTIFY:
        - "DATA_DOWNLOADED"
    INSTRUCT:
    # In order of precedence.
      CODES:
        - "DRAFT"
        - "SUBMITTED"
        - "IN_REVIEW"
        - "REVISION"
        - "APPROVED_WITH_FEEDBACK"
        - "REQUEST_CRITERIA_FINALIZED"
        - "APPROVED"
        - "REJECTED"
        - "WITHDRAWAL"
        - "AGREEMENTS_NEGOTIATION"
        - "AGREEMENTS_EXECUTED"
        - "DATA_AVAILABLE"
        - "DATA_DOWNLOADED"    
        - "PUBLISHED"  
      FINAL:
        - "REJECTED"
        - "WITHDRAWAL"
        - "DATA_DOWNLOADED"
      NOTIFY:
        - "DATA_DOWNLOADED"
    INRG:
    # In order of precedence.
      CODES:
        - "DRAFT"
        - "SUBMITTED"
        - "IN_REVIEW"
        - "REVISION"
        - "APPROVED_WITH_FEEDBACK"
        - "REQUEST_CRITERIA_FINALIZED"
        - "APPROVED"
        - "REJECTED"
        - "WITHDRAWAL"
        - "AGREEMENTS_NEGOTIATION"
        - "AGREEMENTS_EXECUTED"
        - "DATA_AVAILABLE"
        - "DATA_DOWNLOADED"   
        - "PUBLISHED"   
      FINAL:
        - "REJECTED"
        - "WITHDRAWAL"
        - "DATA_DOWNLOADED"
      NOTIFY:
        - "DATA_DOWNLOADED"
    # Add consortia