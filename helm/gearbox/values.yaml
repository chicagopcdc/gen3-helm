# Default values for gearbox.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  # -- (bool) Whether the deployment is for development purposes.
  dev: true
  # -- (map) Postgres database configuration.
  postgres:
    # -- (bool) Whether the database should be created.
    dbCreate: true
    # -- (map) Master credentials to postgres. This is going to be the default postgres server being used for each service, unless each service specifies their own postgres
    master:
      # -- (string) hostname of postgres server
      host:
      # -- (string) username of superuser in postgres. This is used to create or restore databases
      username: postgres
      # -- (string) password for superuser in postgres. This is used to create or restore databases
      password:
      # -- (string) Port for Postgres.
      port: "5432"
  # -- (string) Environment name. This should be the same as vpcname if you're doing an AWS deployment. Currently this is being used to share ALB's if you have multiple namespaces. Might be used other places too.
  environment: default
  # -- (string) Hostname for the deployment.
  hostname: localhost
  # -- (string) ARN of the reverse proxy certificate.
  revproxyArn: arn:aws:acm:us-east-1:123456:certificate
  # -- (string) URL of the data dictionary.
  dictionaryUrl: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
  # -- (string) Portal application name.
  portalApp: gitops
  # -- (string) S3 bucket name for Kubernetes manifest files.
  kubeBucket: kube-gen3
  # -- (string) S3 bucket name for log files.
  logsBucket: logs-gen3
  # -- (bool) Whether to sync data from dbGaP.
  syncFromDbgap: false
  # -- (bool) Whether public datasets are enabled.
  publicDataSets: true
  # -- (string) Access level for tiers. acceptable values for `tier_access_level` are: `libre`, `regular` and `private`. If omitted, by default common will be treated as `private`
  tierAccessLevel: libre
  # -- (int) Only relevant if tireAccessLevel is set to "regular". Summary charts below this limit will not appear for aggregated data.
  tierAccessLimit: 1000
  # -- (bool) Whether network policies are enabled.
  netPolicy: true
  # -- (int) Number of dispatcher jobs.
  dispatcherJobNum: 10
  # -- (bool) Whether Datadog is enabled.
  ddEnabled: false
  # -- (bool) If the service will be deployed with a Pod Disruption Budget. Note- you need to have more than 2 replicas for the pdb to be deployed.
  pdb: false
  # -- (int) The minimum amount of pods that are available at all times if the PDB is deployed.
  minAvialable: 1

postgres:
  # (bool) Whether the database should be restored from s3. Default to global.postgres.dbRestore
  dbRestore: false
  # -- (bool) Whether the database should be created. Default to global.postgres.dbCreate
  dbCreate:
  # -- (string) Hostname for postgres server. This is a service override, defaults to global.postgres.host
  host:
  # -- (string) Database name for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  database:
  # -- (string) Username for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  username:
  # -- (string) Port for Postgres.
  port: "5432"
  # -- (string) Password for Postgres. Will be autogenerated if left empty.
  password:
  # -- (string) Will create a Database for the individual service to help with developing it.
  separate: false

postgresql:
  primary:
    persistence:
      # -- (bool) Option to persist the dbs data.
      enabled: false

replicaCount: 1

image:
  repository: quay.io/pcdc/gearbox_be
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.3.0

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources: 
  requests:
    cpu: 0.4
    memory: 512Mi
  limits:
    cpu: 1
    memory: 2048Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

env:
  - name: GEN3_DEBUG
    value: "False"
  - name: GEN3_ES_ENDPOINT
    value: http://esproxy-service:9200
  - name: AWS_REGION
    value: "us-east-1"
  - name: PGHOST
    valueFrom:
      secretKeyRef:
        name: gearbox-dbcreds
        key: host
        optional: false
  - name: PGUSER
    valueFrom:
      secretKeyRef:
        name: gearbox-dbcreds
        key: username
        optional: false
  - name: PGPASSWORD
    valueFrom:
      secretKeyRef:
        name: gearbox-dbcreds
        key: password
        optional: false
  - name: PGDB
    valueFrom:
      secretKeyRef:
        name: gearbox-dbcreds
        key: database
        optional: false
  - name: DBREADY
    valueFrom:
      secretKeyRef:
        name: gearbox-dbcreds
        key: dbcreated
        optional: false
  - name: GB_SECRET_READY
    valueFrom:
      secretKeyRef:
        name: gearbox-g3auto
        key: secretready
        optional: false

volumes:
  - name: gearbox-middleware-jwt-keys
    secret:
      secretName: "gearbox-middleware-jwt-keys"
      items:
        - key: jwt_public_key.pem
          path: jwt_public_key.pem
      
  - name: config-volume-g3auto
    secret:
      secretName: gearbox-g3auto
  # This volume may or may not be needed or available. See kube-setup-gearbox.sh and note that this
  # is only available if a <manifest dir>/gearbox directory exists.
  - name: config-volume
    secret:
      secretName: gearbox-config
      optional: true
  # This volume may or may not be needed or available. See kube-setup-gearbox.sh and note that this
  # may not exist if the commons does not have any gearbox manifest configuration.
  - name: config-manifest
    configMap:
      name: manifest-gearbox
      optional: true
  
volumeMounts:
  - name: "gearbox-middleware-jwt-keys"
    readOnly: true
    mountPath: "/src/src/gearbox/keys/jwt_public_key.pem"
    subPath: jwt_public_key.pem
  - name: config-volume-g3auto
    readOnly: true
    mountPath: /src/.env
    subPath: gearbox.env
  - name: config-volume
    readOnly: true
    mountPath: /aggregate_config.json
    subPath: aggregate_config.json
  - name: config-manifest
    readOnly: true
    mountPath: /gearbox.json
    subPath: json
  
initVolumeMounts:
  - name: config-volume-g3auto
    readOnly: true
    mountPath: /src/.env
    subPath: gearbox.env


# Values to determine the labels that are used for the deployment, pod, etc.
# -- (string) Valid options are "production" or "dev". If invalid option is set- the value will default to "dev".
release: "production"
# -- (string) Valid options are "true" or "false". If invalid option is set- the value will default to "false".
criticalService: "true"
# -- (string) Label to help organize pods and their use. Any value is valid, but use "_" or "-" to divide words.
partOf: "Core-Service"
# -- (map) Will completely override the selectorLabels defined in the common chart's _label_setup.tpl
selectorLabels:
# -- (map) Will completely override the commonLabels defined in the common chart's _label_setup.tpl
commonLabels:

# Values to configure datadog if ddEnabled is set to "true".
# -- (bool) If enabled, the Datadog Agent will automatically inject Datadog-specific metadata into your application logs.
datadogLogsInjection: true
# -- (bool) If enabled, the Datadog Agent will collect profiling data for your application using the Continuous Profiler. This data can be used to identify performance bottlenecks and optimize your application.
datadogProfilingEnabled: true
# -- (int) A value between 0 and 1, that represents the percentage of requests that will be traced. For example, a value of 0.5 means that 50% of requests will be traced.
datadogTraceSampleRate: 1